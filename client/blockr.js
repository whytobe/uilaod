var UIBlockMessage, UIBlockOpen, UIBlockTemplateInstance;
UIBlockMessage = new ReactiveVar(false);
UIBlockOpen = new ReactiveVar(false);
UIBlockTemplateInstance = false;
this.UIBlock = {
	isBlocked: false,
	block: function(message) {
		if (message == null) {
			message = false;
		}
		this.isBlocked = true;
		if (UIBlockTemplateInstance) {
			Blaze.remove(UIBlockTemplateInstance);
		}
		if ($('body')[0]) {
			UIBlockTemplateInstance = Blaze.render(Template.UIBlock, $('body')[0]);
		}
		UIBlockOpen.set(true);
		if (message) {
			UIBlockMessage.set(message);
		}
		$('html').addClass('UIBlocked');
		return void 0;
	},
	unblock: function() {
		this.isBlocked = false;
		if (UIBlockTemplateInstance) {
			Blaze.remove(UIBlockTemplateInstance);
		}
		UIBlockOpen.set(false);
		UIBlockMessage.set(false);
		$('html').removeClass('UIBlocked');
		return void 0;
	}
};
Meteor.setTimeout(function() {
	return Template.UIBlock.helpers({
		blocked: function() {
			return UIBlockOpen.get();
		},
		message: function() {
			return UIBlockMessage.get();
		}
	});
}, 10);
// ---
// generated by coffee-script 1.9.2
